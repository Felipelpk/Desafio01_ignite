{"ast":null,"code":"var _jsxFileName = \"/home/felipe/Desktop/ignite/Desafio02/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        api.get(`/products/?id=${response.data.id}`).then(response => {\n          const filteredCart = cart.filter(product => product.id === productId);\n\n          if (filteredCart) {\n            const amount = filteredCart[0].amount + 1;\n            updateProductAmount({\n              productId,\n              amount\n            });\n            return;\n          }\n\n          cart.push(response.data);\n        });\n      });\n    } catch {// TODO\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"yuvwwZIsxrDpvj1ES9WkyhAC5Ms=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/felipe/Desktop/ignite/Desafio02/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","get","then","response","data","id","filteredCart","filter","product","amount","updateProductAmount","push","removeProduct","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGJ,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAChD,UAAMO,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAArB;;AAEA,QAAIF,YAAJ,EAAkB;AAChB,aAAOG,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAP;AACD;;AAED,WAAO,EAAP;AACD,GAR+B,CAAhC;;AAUA,QAAMK,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI;AACFZ,MAAAA,GAAG,CAACa,GAAJ,CAAS,cAAaD,SAAU,EAAhC,EAAmCE,IAAnC,CAAwCC,QAAQ,IAAI;AAClDf,QAAAA,GAAG,CAACa,GAAJ,CAAS,iBAAgBE,QAAQ,CAACC,IAAT,CAAcC,EAAG,EAA1C,EAA6CH,IAA7C,CAAkDC,QAAQ,IAAI;AAC5D,gBAAMG,YAAY,GAAGd,IAAI,CAACe,MAAL,CAAYC,OAAO,IAAIA,OAAO,CAACH,EAAR,KAAeL,SAAtC,CAArB;;AACA,cAAIM,YAAJ,EAAkB;AAChB,kBAAMG,MAAM,GAAGH,YAAY,CAAC,CAAD,CAAZ,CAAgBG,MAAhB,GAAyB,CAAxC;AACAC,YAAAA,mBAAmB,CAAC;AAAEV,cAAAA,SAAF;AAAaS,cAAAA;AAAb,aAAD,CAAnB;AACA;AACD;;AAEDjB,UAAAA,IAAI,CAACmB,IAAL,CAAUR,QAAQ,CAACC,IAAnB;AACD,SATD;AAUD,OAXD;AAYD,KAbD,CAaE,MAAM,CACN;AACD;AACF,GAjBD;;AAmBA,QAAMQ,aAAa,GAAIZ,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMU,mBAAmB,GAAG,OAAO;AACjCV,IAAAA,SADiC;AAEjCS,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GATD;;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEjB,MAAAA,IAAF;AAAQO,MAAAA,UAAR;AAAoBa,MAAAA,aAApB;AAAmCF,MAAAA;AAAnC,KADT;AAAA,cAGGnB;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAxDeD,Y;;KAAAA,Y;AA0DhB,OAAO,SAASuB,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAG5B,UAAU,CAACG,WAAD,CAA1B;AAEA,SAAOyB,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      api.get(`/stock/?id=${productId}`).then(response => {\n        api.get(`/products/?id=${response.data.id}`).then(response => {\n          const filteredCart = cart.filter(product => product.id === productId);\n          if (filteredCart) {\n            const amount = filteredCart[0].amount + 1;\n            updateProductAmount({ productId, amount });\n            return\n          }\n\n          cart.push(response.data);\n        })\n      }) \n    } catch {\n      // TODO\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}